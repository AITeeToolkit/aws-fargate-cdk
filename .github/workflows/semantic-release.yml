name: CI/CD Pipeline

concurrency:
  group: infrastructure-deployment
  cancel-in-progress: false

on:
  push:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      force_infra:
        description: Force infra deploy
        required: false
        default: true
        type: boolean
      listener_tag: { required: false, type: string }
      dns_worker_tag: { required: false, type: string }
      api_tag: { required: false, type: string }
      web_tag: { required: false, type: string }
  repository_dispatch:
    types: [api-web-updated]

env:
  AWS_REGION: us-east-1
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_image_changes: ${{ steps.changes.outputs.images }}
      has_infra_changes: ${{ steps.changes.outputs.infra }}
      listener_changed: ${{ steps.changes.outputs.listener_changed }}
      dns_worker_changed: ${{ steps.changes.outputs.dns_worker_changed }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: changes
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "🔍 Branch detected: $BRANCH_NAME"

          if git show --no-patch --format="%P" HEAD | grep -q " "; then
            MERGE_BASE=$(git merge-base HEAD~1 HEAD~2 2>/dev/null || echo "HEAD~1")
            CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          echo "Changed files:"; echo "$CHANGED_FILES"

          IMAGE_FLAG=false INFRA_FLAG=false LISTENER_FLAG=false DNS_WORKER_FLAG=false

          if [[ "$BRANCH_NAME" == "domain-updates" ]]; then
            IMAGE_FLAG=true INFRA_FLAG=true LISTENER_FLAG=true DNS_WORKER_FLAG=true
          else
            [[ "$CHANGED_FILES" =~ ^apps/listener/ ]]     && LISTENER_FLAG=true && IMAGE_FLAG=true
            [[ "$CHANGED_FILES" =~ ^apps/dns-worker/ ]]   && DNS_WORKER_FLAG=true && IMAGE_FLAG=true
            [[ "$CHANGED_FILES" =~ ^apps/(Dockerfile|requirements\.txt)$ ]] \
              && LISTENER_FLAG=true && DNS_WORKER_FLAG=true && IMAGE_FLAG=true
            [[ "$CHANGED_FILES" =~ ^(stacks/|cdk_constructs/|aspects/|app\.py|domains\.json|cdk\.json|requirements\.txt|\.github/workflows/) ]] \
              && INFRA_FLAG=true
          fi

          echo "images=$IMAGE_FLAG"             >> $GITHUB_OUTPUT
          echo "infra=$INFRA_FLAG"              >> $GITHUB_OUTPUT
          echo "listener_changed=$LISTENER_FLAG" >> $GITHUB_OUTPUT
          echo "dns_worker_changed=$DNS_WORKER_FLAG" >> $GITHUB_OUTPUT

  semantic-release:
    runs-on: ubuntu-latest
    needs: check-changes
    if: github.ref == 'refs/heads/main' && (needs.check-changes.outputs.has_image_changes == 'true' || needs.check-changes.outputs.has_infra_changes == 'true')
    outputs:
      new_release: ${{ steps.release_info.outputs.new_release }}
      latest_tag: ${{ steps.release_info.outputs.latest_tag }}
      version: ${{ steps.release_info.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, token: ${{ secrets.GH_TOKEN }} }
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: npm ci
      - name: Run semantic-release
        env: { GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} }
        run: git fetch --tags --force && npx semantic-release
      - id: release_info
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG"   >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          [[ "$LATEST_TAG" != "$PREVIOUS_TAG" && -n "$LATEST_TAG" ]] \
            && echo "new_release=true" >> $GITHUB_OUTPUT \
            || echo "new_release=false" >> $GITHUB_OUTPUT

  generate-tag:
    runs-on: ubuntu-latest
    needs: [check-changes, semantic-release]
    if: always() && (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped')
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
      listener_tag: ${{ steps.tag.outputs.listener_tag }}
      dns_worker_tag: ${{ steps.tag.outputs.dns_worker_tag }}
      api_tag: ${{ steps.tag.outputs.api_tag }}
      web_tag: ${{ steps.tag.outputs.web_tag }}
      should_deploy: ${{ steps.tag.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, token: ${{ secrets.GH_TOKEN }} }

      - id: tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          LISTENER_TAG=$(git tag -l "listener-v*" --sort=-version:refname | head -n1 | sed 's/listener-//' || echo "v1.0.0")
          DNS_WORKER_TAG=$(git tag -l "dns-worker-v*" --sort=-version:refname | head -n1 | sed 's/dns-worker-//' || echo "v1.0.0")

          API_TAG=$(git ls-remote --tags https://github.com/AITeeToolkit/storefront-cdk.git | grep 'api-v' | sed 's/.*api-//' | sort -V | tail -n1 || echo "v1.0.0")
          WEB_TAG=$(git ls-remote --tags https://github.com/AITeeToolkit/storefront-cdk.git | grep 'web-v' | sed 's/.*web-//' | sort -V | tail -n1 || echo "v1.0.0")

          increment_version() {
            local v=${1#v}; IFS=. read -r major minor patch <<< "$v"
            echo "v$major.$minor.$((patch+1))"
          }

          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            API_TAG="${{ github.event.client_payload.api_tag }}"
            WEB_TAG="${{ github.event.client_payload.web_tag }}"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            [[ "${{ needs.check-changes.outputs.listener_changed }}" == "true" ]] \
              && LISTENER_TAG=$(increment_version "$LISTENER_TAG") \
              && git tag "listener-$LISTENER_TAG" && git push origin "listener-$LISTENER_TAG"
            [[ "${{ needs.check-changes.outputs.dns_worker_changed }}" == "true" ]] \
              && DNS_WORKER_TAG=$(increment_version "$DNS_WORKER_TAG") \
              && git tag "dns-worker-$DNS_WORKER_TAG" && git push origin "dns-worker-$DNS_WORKER_TAG"
            [[ "${{ needs.check-changes.outputs.has_infra_changes }}" == "true" || "${{ needs.check-changes.outputs.has_image_changes }}" == "true" ]] \
              && echo "should_deploy=true" >> $GITHUB_OUTPUT || echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

          REPO_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "image_tag=$REPO_TAG" >> $GITHUB_OUTPUT
          echo "listener_tag=$LISTENER_TAG" >> $GITHUB_OUTPUT
          echo "dns_worker_tag=$DNS_WORKER_TAG" >> $GITHUB_OUTPUT
          echo "api_tag=$API_TAG" >> $GITHUB_OUTPUT
          echo "web_tag=$WEB_TAG" >> $GITHUB_OUTPUT

  build-listener:
    needs: [generate-tag, check-changes, semantic-release]
    if: always() && needs.check-changes.outputs.listener_changed == 'true' && (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped')
    uses: ./.github/workflows/listener-build.yml
    with: { environment: dev, image_tag: ${{ needs.generate-tag.outputs.listener_tag }} }
    secrets: inherit

  build-dns-worker:
    needs: [generate-tag, check-changes, semantic-release]
    if: always() && needs.check-changes.outputs.dns_worker_changed == 'true' && (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped')
    uses: ./.github/workflows/dns-worker-build.yml
    with: { environment: dev, image_tag: ${{ needs.generate-tag.outputs.dns_worker_tag }} }
    secrets: inherit

  deploy-infrastructure:
    needs: [generate-tag, check-changes, build-listener, build-dns-worker, semantic-release]
    if: |
      always() &&
      (needs.check-changes.outputs.has_infra_changes == 'true' || needs.check-changes.outputs.has_image_changes == 'true' || github.event_name == 'repository_dispatch') &&
      ((needs.build-listener.result == 'success' || needs.build-listener.result == 'skipped') &&
       (needs.build-dns-worker.result == 'success' || needs.build-dns-worker.result == 'skipped') ||
       needs.check-changes.outputs.has_image_changes == 'false') &&
      (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped')
    uses: ./.github/workflows/infra-build.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.image_tag }}
      listener_tag: ${{ needs.generate-tag.outputs.listener_tag }}
      dns_worker_tag: ${{ needs.generate-tag.outputs.dns_worker_tag }}
      api_tag: ${{ needs.generate-tag.outputs.api_tag }}
      web_tag: ${{ needs.generate-tag.outputs.web_tag }}
    secrets: inherit

  dev-summary:
    needs: [generate-tag, deploy-infrastructure]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Dev Summary
        run: |
          echo "# 🔧 Development Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Image Tag: \`${{ needs.generate-tag.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Development Only" >> $GITHUB_STEP_SUMMARY