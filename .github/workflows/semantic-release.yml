name: Application Deployment

on:
  push:
    branches: ["**"]

env:
  AWS_REGION: us-east-1
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  # ------------------------------------------------------
  # 1. Semantic Release (main only, not domain updates)
  # ------------------------------------------------------
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref_name, 'domain-update-')
    outputs:
      new_release: ${{ steps.release_info.outputs.new_release }}
      latest_tag: ${{ steps.release_info.outputs.latest_tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install --no-audit --no-fund

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git fetch --tags
          npx semantic-release

      - id: release_info
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ] && [ -n "$LATEST_TAG" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  # ------------------------------------------------------
  # 2. Generate Image Tag
  # ------------------------------------------------------
  generate-tag:
    name: Generate Image Tag
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == domain-update-* ]]; then
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "image_tag=domain-update-$SHORT_SHA" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" = "main" ]; then
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            echo "image_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "image_tag=${CLEAN_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

  # ------------------------------------------------------
  # 3. Detect Changes (domain-update always forces true)
  # ------------------------------------------------------
  check-changes:
    name: Check What Changed
    needs: generate-tag
    runs-on: ubuntu-latest
    outputs:
      has_image_changes: ${{ steps.changes.outputs.images }}
      has_infra_changes: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: changes
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == domain-update-* ]]; then
            echo "images=true" >> $GITHUB_OUTPUT
            echo "infra=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if git diff --name-only HEAD~1 HEAD | grep -E '^(storefront/|scripts/listener_app\.py|scripts/Dockerfile)' > /dev/null; then
            echo "images=true" >> $GITHUB_OUTPUT
          else
            echo "images=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD~1 HEAD | grep -E '^(stacks/|cdk_constructs/|aspects/|app\.py|cdk\.json|requirements\.txt|\.github/workflows/)' > /dev/null; then
            echo "infra=true" >> $GITHUB_OUTPUT
          else
            echo "infra=false" >> $GITHUB_OUTPUT
          fi

  # ------------------------------------------------------
  # 4. Build Images
  # ------------------------------------------------------
  build-images:
    name: Build Images
    needs: [generate-tag, check-changes]
    if: needs.check-changes.outputs.has_image_changes == 'true'
    uses: ./.github/workflows/build-images.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.image_tag }}
      force_build: false
    secrets: inherit

  # ------------------------------------------------------
  # 5. Deploy Infrastructure
  # ------------------------------------------------------
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [generate-tag, check-changes, build-images]
    if: needs.check-changes.outputs.has_infra_changes == 'true'
    uses: ./.github/workflows/infrastructure.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.image_tag }}
    secrets: inherit

  # ------------------------------------------------------
  # 6. Deploy Production (only on new release from main)
  # ------------------------------------------------------
  deploy-production:
    name: Deploy to Production
    needs: [semantic-release, deploy-infrastructure]
    if: needs.semantic-release.outputs.new_release == 'true'
    uses: ./.github/workflows/infrastructure.yml
    with:
      environment: prod
      image_tag: ${{ needs.semantic-release.outputs.latest_tag }}
    secrets: inherit