name: CI/CD Pipeline

concurrency:
  group: ci-cd-pipeline-${{ inputs.environment || github.event.client_payload.environment || 'dev' }}
  cancel-in-progress: false  # Don't cancel, queue instead

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      force_infra:
        description: Force infra deploy
        required: false
        default: true
        type: boolean
      force_control_plane:
        description: Force Control Plane build
        required: false
        default: false
        type: boolean
      skip_tests:
        description: Skip test gate
        required: false
        default: false
        type: boolean
      control_plane_tag:
        required: false
        type: string
      api_tag:
        required: false
        type: string
      web_tag:
        required: false
        type: string
      go_dns_tag:
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        description: Environment to deploy to
        required: true
        type: string
      force_infra:
        description: Force infra deploy
        required: false
        default: true
        type: boolean
      deploy_all_environments:
        description: "Deploy all environments (dev, staging, prod)"
        required: false
        default: false
        type: boolean
    secrets:
      AWS_CODEBUILD_ACCESS_KEY_ID:
        required: true
      AWS_CODEBUILD_SECRET_ACCESS_KEY:
        required: true
      GH_TOKEN:
        required: true
  repository_dispatch:
    types: [api-web-updated, domain-update]

env:
  AWS_REGION: us-east-1
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  ENVIRONMENT: ${{ inputs.environment || github.event.client_payload.environment || 'dev' }}

jobs:
  test-gate:
    name: Test Gate
    if: github.event_name != 'repository_dispatch' && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip tests]') && inputs.skip_tests != true && github.event.client_payload.skip_tests != true
    uses: ./.github/workflows/test-suite.yml
    with:
      environment: ${{ inputs.environment || github.event.client_payload.environment || 'dev' }}
    secrets: inherit

  check-changes:
    name: Check What Changed
    runs-on: ubuntu-latest
    needs: [test-gate]
    if: always() && (needs.test-gate.result == 'success' || needs.test-gate.result == 'skipped') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')
    outputs:
      has_image_changes: ${{ steps.changes.outputs.images }}
      has_infra_changes: ${{ steps.changes.outputs.infra }}
      control_plane_changed: ${{ steps.changes.outputs.control_plane }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: changes
        run: |
          set -x  # ✅ Trace all commands

          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "🔍 Branch detected: $BRANCH_NAME"

          # Handle merge commits differently
          if git show --no-patch --format="%P" HEAD | grep -q " "; then
            echo "🔀 Merge commit detected - checking against merge base"
            # For merge commits, compare against the merge base of the two parents
            MERGE_BASE=$(git merge-base HEAD~1 HEAD~2 2>/dev/null || echo "HEAD~1")
            CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)
          else
            echo "📝 Regular commit - checking against previous commit"
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          echo " Changed files:"

          IMAGE_FLAG=false
          INFRA_FLAG=false
          CONTROL_PLANE_FLAG=false

          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "infra=true" >> $GITHUB_OUTPUT
            echo "control_plane=false" >> $GITHUB_OUTPUT
          else
            # Check for ControlPlane-specific changes
            if echo "$CHANGED_FILES" | grep -E '^apps/control-plane/' > /dev/null; then
              echo " Detected changes in control-plane files"
              CONTROL_PLANE_FLAG=true
              IMAGE_FLAG=true
            fi

            # Check for shared container files
            if echo "$CHANGED_FILES" | grep -E '^apps/requirements\.txt$' > /dev/null; then
              echo " Detected changes in shared requirements.txt"
              CONTROL_PLANE_FLAG=true
              IMAGE_FLAG=true
            fi

            # Check for individual requirements.txt changes
            if echo "$CHANGED_FILES" | grep -E '^apps/control-plane/requirements\.txt$' > /dev/null; then
              echo " Detected changes in control-plane requirements.txt"
              CONTROL_PLANE_FLAG=true
              IMAGE_FLAG=true
            fi

            if [[ "$IMAGE_FLAG" == "false" ]]; then
              echo " No image-related changes detected"
            fi

            INFRA_PATHS="^(stacks/|cdk_constructs/|aspects/|infrastructure/|app\.py|domains\.json|cdk\.json|requirements\.txt|\.github/workflows/)"

            if echo "$CHANGED_FILES" | grep -E "$INFRA_PATHS" > /dev/null; then
              echo " Detected changes in infrastructure-related files"
              INFRA_FLAG=true
            fi

            echo "images=$IMAGE_FLAG" >> $GITHUB_OUTPUT
            echo "infra=$INFRA_FLAG" >> $GITHUB_OUTPUT
            echo "control_plane=$CONTROL_PLANE_FLAG" >> $GITHUB_OUTPUT
          fi

          # 📝 Write to the GitHub Actions summary UI
          {
            echo "## 🔍 Change Detection Summary"
            echo ""
            echo "**Branch**: \`$BRANCH_NAME\`"
            echo ""
            echo "**Changed Files:**"
            echo '```'
            echo "$CHANGED_FILES"
            echo '```'
            echo ""
            echo "**Flags Set:**"
            echo ""
            echo "• Image Changes: \`$IMAGE_FLAG\`"
            echo "• Infra Changes: \`$INFRA_FLAG\`"
            if [[ "${{ github.event.inputs.force_infra }}" == "true" ]]; then
              echo "• 🔴 **Force Infra Deploy: ENABLED**"
            fi
          } >> $GITHUB_STEP_SUMMARY


  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [test-gate, check-changes]
    if: github.ref == 'refs/heads/main' && (needs.check-changes.outputs.has_image_changes == 'true' || needs.check-changes.outputs.has_infra_changes == 'true') && (needs.test-gate.result == 'success' || needs.test-gate.result == 'skipped')
    outputs:
      new_release: ${{ steps.release_info.outputs.new_release }}
      latest_tag: ${{ steps.release_info.outputs.latest_tag }}
      version: ${{ steps.release_info.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Configure git user for commits and tags
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch latest tags to ensure semantic-release has fresh state
          git fetch --tags --force

          # Run semantic-release
          npx semantic-release

          if [ $? -eq 0 ]; then
            echo "Semantic-release completed successfully"
            echo "new_release=true" >> $GITHUB_OUTPUT
          elif [ $? -eq 1 ]; then
            echo "No release needed (semantic-release exit code 1)"
            echo "new_release=false" >> $GITHUB_OUTPUT
          elif echo "$OUTPUT" | grep -q "already exists"; then
            echo "Tag already exists - treating as successful (no new release needed)"
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "Semantic-release failed with exit code $EXIT_CODE"
            echo "$OUTPUT"
            exit $EXIT_CODE
          fi
      - name: Get release info
        id: release_info
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ] && [ -n "$LATEST_TAG" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  generate-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test-gate, check-changes, semantic-release]
    if: always() && (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped') && (needs.test-gate.result == 'success' || needs.test-gate.result == 'skipped')
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
      control_plane_tag: ${{ steps.tag.outputs.control_plane_tag }}
      api_tag: ${{ steps.tag.outputs.api_tag }}
      web_tag: ${{ steps.tag.outputs.web_tag }}
      go_dns_tag: ${{ steps.tag.outputs.go_dns_tag }}
      should_deploy: ${{ steps.tag.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - id: tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # WORKFLOW DISPATCH: Use provided tags if available
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "🔍 Workflow dispatch detected - using provided tags"
            CONTROL_PLANE_TAG="${{ inputs.control_plane_tag }}"
            API_TAG="${{ inputs.api_tag }}"
            WEB_TAG="${{ inputs.web_tag }}"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

          # Get current service tags (local for control-plane, remote for api/web)
          if [[ -z "$CONTROL_PLANE_TAG" ]]; then
            LATEST_TAG=$(git tag -l "control-plane-v*" --sort=-version:refname | head -n1)
            if [[ -n "$LATEST_TAG" ]]; then
              CONTROL_PLANE_TAG=$(echo "$LATEST_TAG" | sed 's/control-plane-//')
            else
              CONTROL_PLANE_TAG="v1.0.0"
            fi
          fi

          # Fetch latest API/WEB tags from storefront-cdk repository if not provided
          if [[ -z "$API_TAG" || -z "$WEB_TAG" ]]; then
            echo "🔍 Fetching latest API/WEB tags from storefront-cdk..."
            API_TAG=$(git ls-remote --tags https://github.com/AITeeToolkit/storefront-cdk.git | grep 'api-v' | sed 's/.*api-//' | sort -V | tail -n1 || echo "v1.0.0")
            WEB_TAG=$(git ls-remote --tags https://github.com/AITeeToolkit/storefront-cdk.git | grep 'web-v' | sed 's/.*web-//' | sort -V | tail -n1 || echo "v1.0.0")
            echo "🏷️ Fetched from storefront-cdk - API: $API_TAG, WEB: $WEB_TAG"
          fi

          increment_version() {
            local version=$1
            local clean_version=$(echo $version | sed 's/^v//')
            local major=$(echo $clean_version | cut -d. -f1)
            local minor=$(echo $clean_version | cut -d. -f2)
            local patch=$(echo $clean_version | cut -d. -f3)
            echo "v$major.$minor.$((patch + 1))"
          }

          # REPOSITORY DISPATCH: Use payload tags directly
          echo "🔍 Event name: ${{ github.event_name }}"
          echo "🔍 Payload API tag: ${{ github.event.client_payload.api_tag }}"
          echo "🔍 Payload WEB tag: ${{ github.event.client_payload.web_tag }}"

          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "🔍 Repository dispatch detected"
            API_TAG="${{ github.event.client_payload.api_tag }}"
            WEB_TAG="${{ github.event.client_payload.web_tag }}"
            echo "🏷️ Using payload - API: $API_TAG, WEB: $WEB_TAG"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            # REGULAR WORKFLOW: Handle local service changes
            BRANCH_NAME="${{ github.ref_name }}"
            SHORT_SHA="${{ github.sha }}"
            SHORT_SHA=${SHORT_SHA:0:7}

            if [[ "$BRANCH_NAME" == "main" ]]; then
              # Main branch: Create proper version tags
              if [[ "${{ needs.check-changes.outputs.control_plane_changed }}" == "true" && -z "${{ inputs.control_plane_tag }}" ]]; then
                CONTROL_PLANE_TAG=$(increment_version "$CONTROL_PLANE_TAG")
                git tag "control-plane-$CONTROL_PLANE_TAG" && git push origin "control-plane-$CONTROL_PLANE_TAG"
                echo "🏷️ Incremented control-plane: $CONTROL_PLANE_TAG"
              elif [[ -n "${{ inputs.control_plane_tag }}" ]]; then
                echo "🏷️ Using provided control-plane tag: $CONTROL_PLANE_TAG"
              fi
            else
              # Non-main branch: Create branch-specific tags
              if [[ "${{ needs.check-changes.outputs.control_plane_changed }}" == "true" ]]; then
                CONTROL_PLANE_TAG="${BRANCH_NAME}-${SHORT_SHA}"
                echo "🏷️ Branch control-plane tag: $CONTROL_PLANE_TAG"
              fi
            fi

            if [[ "${{ needs.check-changes.outputs.has_infra_changes }}" == "true" || "${{ needs.check-changes.outputs.has_image_changes }}" == "true" ]]; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

          # Use latest repository tag as overall deployment version
          REPO_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "image_tag=$REPO_TAG" >> $GITHUB_OUTPUT
          echo "control_plane_tag=$CONTROL_PLANE_TAG" >> $GITHUB_OUTPUT
          echo "api_tag=$API_TAG" >> $GITHUB_OUTPUT
          echo "web_tag=$WEB_TAG" >> $GITHUB_OUTPUT

  build-control-plane:
    name: Build & Push Control Plane Image
    needs: [test-gate, generate-tag, check-changes, semantic-release]
    if: |
      always() && (
        (inputs.control_plane_tag != null && inputs.control_plane_tag != '') ||
        inputs.force_control_plane == true ||
        ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && needs.check-changes.outputs.control_plane_changed == 'true')
      ) && (
        needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped'
      ) && (
        needs.test-gate.result == 'success' || needs.test-gate.result == 'skipped'
      )
    uses: ./.github/workflows/control-plane-build.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.control_plane_tag }}
    secrets: inherit

  build-go-dns:
    name: Build & Push Go DNS Image
    needs: [test-gate, generate-tag, check-changes, semantic-release]
    if: |
      always() && (
        (inputs.go_dns_tag != null && inputs.go_dns_tag != '') ||
        inputs.force_go_dns == true ||
        ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && needs.check-changes.outputs.go_dns_changed == 'true')
      ) && (
        needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped'
      ) && (
        needs.test-gate.result == 'success' || needs.test-gate.result == 'skipped'
      )
    uses: ./.github/workflows/go-dns-build.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.go_dns_tag }}
    secrets: inherit

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [test-gate, generate-tag, check-changes, semantic-release, build-control-plane, build-go-dns]
    if: |
      always() && (
        inputs.force_infra == true ||
        (
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_call') && (
            needs.check-changes.outputs.has_infra_changes == 'true' ||
            needs.check-changes.outputs.has_image_changes == 'true' ||
            github.event_name == 'repository_dispatch'
          )
        )
      ) && (
        needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped'
      ) && (
        needs.test-gate.result == 'success' || needs.test-gate.result == 'skipped'
      ) && (
        needs.build-control-plane.result == 'success' || needs.build-control-plane.result == 'skipped'
      ) && (
        needs.build-go-dns.result == 'success' || needs.build-go-dns.result == 'skipped'
      )
    uses: ./.github/workflows/infra-build.yml
    with:
      environment: ${{ inputs.environment || github.event.client_payload.environment || 'dev' }}
      deploy_all_environments: ${{ inputs.deploy_all_environments || contains(github.event.head_commit.message, '[deploy-all]') || false }}
      image_tag: ${{ needs.generate-tag.outputs.image_tag }}
      control_plane_tag: ${{ needs.generate-tag.outputs.control_plane_tag }}
      api_tag: ${{ needs.generate-tag.outputs.api_tag }}
      web_tag: ${{ needs.generate-tag.outputs.web_tag }}
      go_dns_tag: ${{ needs.generate-tag.outputs.go_dns_tag }}
    secrets: inherit

  dev-summary:
    name: Deployment Summary
    needs: [generate-tag, deploy-infrastructure]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Dev Summary
        env:
          CONTROL_PLANE_TAG: ${{ needs.generate-tag.outputs.control_plane_tag }}
          API_TAG: ${{ needs.generate-tag.outputs.api_tag }}
          WEB_TAG: ${{ needs.generate-tag.outputs.web_tag }}
          DEV_STATUS: ${{ needs.deploy-infrastructure.result }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          # Determine environment based on input or branch
          ENV_TARGET="${{ env.ENVIRONMENT }}"
          if [ "$ENV_TARGET" = "prod" ]; then
            ENV_NAME="Production"
            ENV_DESCRIPTION="Production Environment"
          elif [ "$ENV_TARGET" = "staging" ]; then
            ENV_NAME="Staging"
            ENV_DESCRIPTION="Staging Environment"
          else
            ENV_NAME="Development"
            ENV_DESCRIPTION="Development Environment"
          fi

          echo "# 🔧 $ENV_NAME Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Branch Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $ENV_DESCRIPTION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Service Versions" >> $GITHUB_STEP_SUMMARY
          echo "- **Control Plane:** \`$CONTROL_PLANE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- **API:** \`$API_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Web:** \`$WEB_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "$DEV_STATUS" = "success" ]; then
            echo "| $ENV_NAME | ✅ Success | Deployed successfully |" >> $GITHUB_STEP_SUMMARY
          elif [ "$DEV_STATUS" = "skipped" ]; then
            echo "| $ENV_NAME | ⏭️ Skipped | No infrastructure changes detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| $ENV_NAME | ❌ Failed | Deployment failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$DEV_STATUS" = "success" ]; then
            if [ "$BRANCH_NAME" = "main" ]; then
              echo "- ✅ Production deployment completed successfully" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor production application logs for any issues" >> $GITHUB_STEP_SUMMARY
              echo "- Verify services are running correctly in production" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Test your changes in the development environment" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor application logs for any issues" >> $GITHUB_STEP_SUMMARY
              echo "- Create a pull request to merge into main for production deployment" >> $GITHUB_STEP_SUMMARY
              echo "- Production deployment will trigger automatically after PR merge" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "$DEV_STATUS" = "skipped" ]; then
            echo "- ✅ No deployment needed - only non-infrastructure files changed" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Changes were documentation, workflow, or other non-deployment files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Check deployment logs for error details" >> $GITHUB_STEP_SUMMARY
            echo "- Fix issues and re-run deployment" >> $GITHUB_STEP_SUMMARY
            if [ "$BRANCH_NAME" != "main" ]; then
              echo "- Production deployment will trigger automatically after PR merge" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "### AWS Console" >> $GITHUB_STEP_SUMMARY
          echo "- [ECS Clusters](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters)" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks)" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Deployment Logs & History" >> $GITHUB_STEP_SUMMARY
          echo "- [This Workflow Run](https://github.com/AITeeToolkit/aws-fargate-cdk/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [All Infrastructure Deployments](https://github.com/AITeeToolkit/aws-fargate-cdk/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- [Infrastructure Changelog](https://github.com/AITeeToolkit/aws-fargate-cdk/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
