name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      force_infra:
        description: Force infra deploy
        required: false
        default: true
        type: boolean
      listener_tag:
        required: false
        type: string
      api_tag:
        required: false
        type: string
      web_tag:
        required: false
        type: string
  repository_dispatch:
    types: [api-web-updated]

env:
  AWS_REGION: us-east-1
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_release: ${{ steps.release_info.outputs.new_release }}
      latest_tag: ${{ steps.release_info.outputs.latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install --no-audit --no-fund
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git fetch --tags
          npx semantic-release
      - name: Get release info
        id: release_info
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ] && [ -n "$LATEST_TAG" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  generate-tag:
    name: Generate Image Tag
    runs-on: ubuntu-latest
    needs: [semantic-release]
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "domain-updates" ]]; then
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "image_tag=domain-updates-$SHORT_SHA" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" = "main" ]; then
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            echo "image_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "image_tag=${CLEAN_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

  check-changes:
    name: Check What Changed
    needs: [generate-tag]
    runs-on: ubuntu-latest
    outputs:
      has_image_changes: ${{ steps.changes.outputs.images }}
      has_infra_changes: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: changes
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          if [[ "$BRANCH_NAME" == "domain-updates" ]]; then
            echo "images=true" >> $GITHUB_OUTPUT
            echo "infra=true" >> $GITHUB_OUTPUT
          fi

          # Check for image-related changes (listener only for now)
          if git diff --name-only HEAD~1 HEAD | grep -E '^(scripts/listener_app\.py|scripts/Dockerfile)' > /dev/null; then
            echo "images=true" >> $GITHUB_OUTPUT
          else
            echo "images=false" >> $GITHUB_OUTPUT
          fi

          # Check for infra-related changes
          if git diff --name-only HEAD~1 HEAD | grep -E '^(stacks/|cdk_constructs/|aspects/|app\.py|cdk\.json|requirements\.txt|\.github/workflows/)' > /dev/null; then
            echo "infra=true" >> $GITHUB_OUTPUT
          else
            echo "infra=false" >> $GITHUB_OUTPUT
          fi

  build-listener:
    name: Build Listener
    needs: [generate-tag, check-changes]
    if: needs.check-changes.outputs.has_image_changes == 'true'
    uses: ./.github/workflows/listener-build.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.image_tag }}
      force_build: false
    secrets: inherit

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [generate-tag, check-changes, build-listener]
    if: |
      needs.check-changes.outputs.has_image_changes == 'true' ||
      needs.check-changes.outputs.has_infra_changes == 'true' ||
      github.event_name == 'repository_dispatch'
    uses: ./.github/workflows/infra-build.yml
    with:
      environment: dev
      image_tag: ${{ github.event.client_payload.api_tag || github.event.client_payload.web_tag || needs.generate-tag.outputs.image_tag }}
      api_tag: ${{ github.event.client_payload.api_tag || '' }}
      web_tag: ${{ github.event.client_payload.web_tag || '' }}
    secrets: inherit

  dev-summary:
    name: Development Deployment Summary
    needs: [generate-tag, deploy-infrastructure]
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Dev Summary
        env:
          IMAGE_TAG: ${{ needs.generate-tag.outputs.image_tag }}
          DEV_STATUS: ${{ needs.deploy-infrastructure.result }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "# 🔧 Development Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Branch Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Development Only" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DEV_STATUS" = "success" ]; then
            echo "| Development | ✅ Success | Deployed successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Development | ❌ Failed | Deployment failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Test your changes in the development environment" >> $GITHUB_STEP_SUMMARY
          echo "- Create a pull request to merge into main for production deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Production deployment will trigger automatically after PR merge" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [AWS Console](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters)" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups)" >> $GITHUB_STEP_SUMMARY
