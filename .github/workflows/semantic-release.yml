name: CI/CD Pipeline

concurrency:
  group: infrastructure-deployment
  cancel-in-progress: false  # Queue instead of cancel

on:
  push:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      force_infra:
        description: Force infra deploy
        required: false
        default: true
        type: boolean
      listener_tag:
        type: string
      dns_worker_tag:
        type: string
      api_tag:
        type: string
      web_tag:
        type: string
  repository_dispatch:
    types: [api-web-updated]

env:
  AWS_REGION: us-east-1
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  check-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      has_image_changes: ${{ steps.detect.outputs.images }}
      has_infra_changes: ${{ steps.detect.outputs.infra }}
      listener_changed: ${{ steps.detect.outputs.listener }}
      dns_worker_changed: ${{ steps.detect.outputs.dns_worker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: detect
        run: |
          set -x
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "🔍 Branch: $BRANCH"

          # Default flags
          IMAGE=false INFRA=false LISTENER=false DNS=false

          # Collect changes
          BASE=$(git merge-base HEAD~1 HEAD~2 2>/dev/null || echo "HEAD~1")
          FILES=$(git diff --name-only $BASE HEAD || git show --name-only --format="" HEAD)
          echo "Changed files:"; echo "$FILES"

          if [[ "$BRANCH" == "domain-updates" ]]; then
            IMAGE=true INFRA=true LISTENER=true DNS=true
          else
            [[ "$FILES" =~ ^apps/listener/ ]] && { LISTENER=true; IMAGE=true; }
            [[ "$FILES" =~ ^apps/dns-worker/ ]] && { DNS=true; IMAGE=true; }
            [[ "$FILES" =~ ^apps/(Dockerfile|requirements\.txt)$ ]] && { LISTENER=true; DNS=true; IMAGE=true; }

            INFRA_PATHS="^(stacks/|cdk_constructs/|aspects/|infrastructure/|app\.py|domains\.json|cdk\.json|requirements\.txt|\.github/workflows/)"
            [[ "$FILES" =~ $INFRA_PATHS ]] && INFRA=true
          fi

          echo "images=$IMAGE" >> $GITHUB_OUTPUT
          echo "infra=$INFRA" >> $GITHUB_OUTPUT
          echo "listener=$LISTENER" >> $GITHUB_OUTPUT
          echo "dns_worker=$DNS" >> $GITHUB_OUTPUT

          {
            echo "## 🔍 Change Detection"
            echo "**Branch:** \`$BRANCH\`"
            echo ""
            echo "**Changed Files:**"
            echo '```'; echo "$FILES"; echo '```'
            echo ""
            echo "**Flags:**"
            echo "- Image: $IMAGE"
            echo "- Infra: $INFRA"
            echo "- Listener: $LISTENER"
            echo "- DNS Worker: $DNS"
          } >> $GITHUB_STEP_SUMMARY

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: github.ref == 'refs/heads/main' && 
        (needs.check-changes.outputs.has_image_changes == 'true' || needs.check-changes.outputs.has_infra_changes == 'true')
    outputs:
      new_release: ${{ steps.info.outputs.new_release }}
      latest_tag: ${{ steps.info.outputs.latest_tag }}
      version: ${{ steps.info.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, token: ${{ secrets.GH_TOKEN }} }
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: npm ci
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git fetch --tags --force
          npx semantic-release
      - id: info
        run: |
          LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREV=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "latest_tag=$LATEST" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT
          [[ "$LATEST" != "$PREV" && -n "$LATEST" ]] && echo "new_release=true" >> $GITHUB_OUTPUT || echo "new_release=false" >> $GITHUB_OUTPUT
          echo "version=$LATEST" >> $GITHUB_OUTPUT

  generate-tag:
    runs-on: ubuntu-latest
    needs: [check-changes, semantic-release]
    if: always()
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
      listener_tag: ${{ steps.tag.outputs.listener_tag }}
      dns_worker_tag: ${{ steps.tag.outputs.dns_worker_tag }}
      api_tag: ${{ steps.tag.outputs.api_tag }}
      web_tag: ${{ steps.tag.outputs.web_tag }}
      should_deploy: ${{ steps.tag.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, token: ${{ secrets.GH_TOKEN }} }

      - id: tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Use semantic-release output for repo tag
          REPO_TAG="${{ needs.semantic-release.outputs.latest_tag || 'v1.0.0' }}"

          # Service tags
          LISTENER=$(git tag -l "listener-v*" --sort=-version:refname | head -n1 | sed 's/listener-//' || echo "v1.0.0")
          DNS=$(git tag -l "dns-worker-v*" --sort=-version:refname | head -n1 | sed 's/dns-worker-//' || echo "v1.0.0")

          bump() {
            v=$1; c=${v#v}; IFS=. read -r M m p <<<"$c"; echo "v$M.$m.$((p+1))"
          }

          if [[ "${{ needs.check-changes.outputs.listener_changed }}" == "true" ]]; then
            LISTENER=$(bump "$LISTENER")
            git tag "listener-$LISTENER" && git push origin "listener-$LISTENER"
          fi

          if [[ "${{ needs.check-changes.outputs.dns_worker_changed }}" == "true" ]]; then
            DNS=$(bump "$DNS")
            git tag "dns-worker-$DNS" && git push origin "dns-worker-$DNS"
          fi

          # API/WEB tags from storefront-cdk
          API=$(git ls-remote --tags https://github.com/AITeeToolkit/storefront-cdk.git | grep 'api-v' | sed 's/.*api-//' | sort -V | tail -n1 || echo "v1.0.0")
          WEB=$(git ls-remote --tags https://github.com/AITeeToolkit/storefront-cdk.git | grep 'web-v' | sed 's/.*web-//' | sort -V | tail -n1 || echo "v1.0.0")

          echo "image_tag=$REPO_TAG" >> $GITHUB_OUTPUT
          echo "listener_tag=$LISTENER" >> $GITHUB_OUTPUT
          echo "dns_worker_tag=$DNS" >> $GITHUB_OUTPUT
          echo "api_tag=$API" >> $GITHUB_OUTPUT
          echo "web_tag=$WEB" >> $GITHUB_OUTPUT

          if [[ "${{ needs.check-changes.outputs.has_infra_changes }}" == "true" || "${{ needs.check-changes.outputs.has_image_changes }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi