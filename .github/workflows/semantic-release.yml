name: CI/CD Pipeline

concurrency:
  group: infrastructure-deployment
  cancel-in-progress: false  # Don't cancel, queue instead

on:
  push:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      force_infra:
        description: Force infra deploy
        required: false
        default: true
        type: boolean
      listener_tag:
        required: false
        type: string
      dns_worker_tag:
        required: false
        type: string
      api_tag:
        required: false
        type: string
      web_tag:
        required: false
        type: string
  repository_dispatch:
    types: [api-web-updated]

env:
  AWS_REGION: us-east-1
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  check-changes:
    name: Check What Changed
    runs-on: ubuntu-latest
    outputs:
      has_image_changes: ${{ steps.changes.outputs.images }}
      has_infra_changes: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: changes
        run: |
          set -x  # ✅ Trace all commands
        
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "🔍 Branch detected: $BRANCH_NAME"
        
          # Handle merge commits differently
          if git show --no-patch --format="%P" HEAD | grep -q " "; then
            echo "🔀 Merge commit detected - checking against merge base"
            # For merge commits, compare against the merge base of the two parents
            MERGE_BASE=$(git merge-base HEAD~1 HEAD~2 2>/dev/null || echo "HEAD~1")
            CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD)
          else
            echo "📝 Regular commit - checking against previous commit"
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "📂 Changed files:"
          echo "$CHANGED_FILES"
        
          IMAGE_FLAG=false
          INFRA_FLAG=false
        
          # Check for manual force infrastructure deploy
          if [[ "${{ github.event.inputs.force_infra }}" == "true" ]]; then
            echo "🔴 Manual force infra deploy requested"
            INFRA_FLAG=true
          fi
        
          if [[ "$BRANCH_NAME" == "domain-updates" ]]; then
            echo "🟡 Domain updates branch: forcing all image & infra flags to true"
            IMAGE_FLAG=true
            INFRA_FLAG=true
            echo "images=true" >> $GITHUB_OUTPUT
            echo "infra=true" >> $GITHUB_OUTPUT
          else
            if echo "$CHANGED_FILES" | grep -E '^apps/(listener/|dns-worker/|Dockerfile|requirements\.txt)' > /dev/null; then
              echo "✅ Detected changes in image-related files"
              IMAGE_FLAG=true
            else
              echo "🚫 No image-related changes detected"
            fi
        
            if echo "$CHANGED_FILES" | grep -E '^(stacks/|cdk_constructs/|aspects/|app\.py|domains\.json|cdk\.json|requirements\.txt|\.github/workflows/)' > /dev/null; then
              echo "✅ Detected changes in infrastructure-related files"
              INFRA_FLAG=true
            else
              echo "🚫 No infra-related changes detected"
            fi
        
            echo "images=$IMAGE_FLAG" >> $GITHUB_OUTPUT
            echo "infra=$INFRA_FLAG" >> $GITHUB_OUTPUT
          fi
        
          # 📝 Write to the GitHub Actions summary UI
          {
            echo "## 🔍 Change Detection Summary"
            echo ""
            echo "**Branch**: \`$BRANCH_NAME\`"
            echo ""
            echo "**Changed Files:**"
            echo '```'
            echo "$CHANGED_FILES"
            echo '```'
            echo ""
            echo "**Flags Set:**"
            echo ""
            echo "• Image Changes: \`$IMAGE_FLAG\`"
            echo "• Infra Changes: \`$INFRA_FLAG\`"
            if [[ "${{ github.event.inputs.force_infra }}" == "true" ]]; then
              echo "• 🔴 **Force Infra Deploy: ENABLED**"
            fi
          } >> $GITHUB_STEP_SUMMARY


  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: github.ref == 'refs/heads/main' && (needs.check-changes.outputs.has_image_changes == 'true' || needs.check-changes.outputs.has_infra_changes == 'true')
    outputs:
      new_release: ${{ steps.release_info.outputs.new_release }}
      latest_tag: ${{ steps.release_info.outputs.latest_tag }}
      version: ${{ steps.release_info.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Fetch latest tags to ensure semantic-release has fresh state
          git fetch --tags --force
          npx semantic-release
      - name: Get release info
        id: release_info
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ] && [ -n "$LATEST_TAG" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  generate-tag:
    name: Generate Image Tags
    runs-on: ubuntu-latest
    needs: [check-changes, semantic-release]
    if: always()  # Run even if semantic-release is skipped
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}
      listener_tag: ${{ steps.tag.outputs.listener_tag }}
      dns_worker_tag: ${{ steps.tag.outputs.dns_worker_tag }}
      api_tag: ${{ steps.tag.outputs.api_tag }}
      web_tag: ${{ steps.tag.outputs.web_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - id: tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "domain-updates" ]]; then
            SHORT_SHA=${GITHUB_SHA:0:7}
            echo "image_tag=domain-updates-$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "listener_tag=domain-updates-$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "dns_worker_tag=domain-updates-$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "api_tag=domain-updates-$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "web_tag=domain-updates-$SHORT_SHA" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" = "main" ]; then
            # Repository-wide tag for infrastructure
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            echo "image_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            
            # Service-specific tags - increment if images are being built
            LISTENER_TAG=$(git tag -l "listener-v*" --sort=-version:refname | head -n1 | sed 's/listener-//' || echo "v1.0.0")
            DNS_WORKER_TAG=$(git tag -l "dns-worker-v*" --sort=-version:refname | head -n1 | sed 's/dns-worker-//' || echo "v1.0.0")
            API_TAG=$(git tag -l "api-v*" --sort=-version:refname | head -n1 | sed 's/api-//' || echo "v1.0.0")
            WEB_TAG=$(git tag -l "web-v*" --sort=-version:refname | head -n1 | sed 's/web-//' || echo "v1.0.0")
            
            # Increment service tags if images are being built
            if [[ "${{ needs.check-changes.outputs.has_image_changes }}" == "true" ]]; then
              # Increment patch version for services being built
              increment_version() {
                local version=$1
                local clean_version=${version#v}  # Remove 'v' prefix
                local major=$(echo $clean_version | cut -d. -f1)
                local minor=$(echo $clean_version | cut -d. -f2)
                local patch=$(echo $clean_version | cut -d. -f3)
                echo "v$major.$minor.$((patch + 1))"
              }
              
              LISTENER_TAG=$(increment_version "$LISTENER_TAG")
              DNS_WORKER_TAG=$(increment_version "$DNS_WORKER_TAG")
              
              # Create and push new service tags
              git tag "listener-$LISTENER_TAG"
              git tag "dns-worker-$DNS_WORKER_TAG"
              git push origin "listener-$LISTENER_TAG"
              git push origin "dns-worker-$DNS_WORKER_TAG"
              
              echo "🏷️ Created new service tags: listener-$LISTENER_TAG, dns-worker-$DNS_WORKER_TAG"
            fi
            
            echo "listener_tag=$LISTENER_TAG" >> $GITHUB_OUTPUT
            echo "dns_worker_tag=$DNS_WORKER_TAG" >> $GITHUB_OUTPUT
            echo "api_tag=$API_TAG" >> $GITHUB_OUTPUT
            echo "web_tag=$WEB_TAG" >> $GITHUB_OUTPUT
          else
            CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            SHORT_SHA=${GITHUB_SHA:0:7}
            BRANCH_TAG="${CLEAN_BRANCH}-${SHORT_SHA}"
            echo "image_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
            echo "listener_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
            echo "dns_worker_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
            echo "api_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
            echo "web_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          fi


  build-listener:
    name: Build & Push Listener Image
    needs: [generate-tag, check-changes]
    if: needs.check-changes.outputs.has_image_changes == 'true'
    uses: ./.github/workflows/listener-build.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.listener_tag }}
    secrets: inherit

  build-dns-worker:
    name: Build & Push DNS Worker Image
    needs: [generate-tag, check-changes]
    if: needs.check-changes.outputs.has_image_changes == 'true'
    uses: ./.github/workflows/dns-worker-build.yml
    with:
      environment: dev
      image_tag: ${{ needs.generate-tag.outputs.dns_worker_tag }}
    secrets: inherit

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [generate-tag, check-changes, build-listener, build-dns-worker]
    if: |
      always() && (
        needs.check-changes.outputs.has_infra_changes == 'true' ||
        needs.check-changes.outputs.has_image_changes == 'true' ||
        github.event_name == 'repository_dispatch'
      ) && (
        (needs.build-listener.result == 'success' || needs.build-listener.result == 'skipped') &&
        (needs.build-dns-worker.result == 'success' || needs.build-dns-worker.result == 'skipped') ||
        needs.check-changes.outputs.has_image_changes == 'false'
      )
    uses: ./.github/workflows/infra-build.yml
    with:
      environment: dev
      image_tag: ${{ github.event.client_payload.api_tag || github.event.client_payload.web_tag || needs.generate-tag.outputs.image_tag }}
      listener_tag: ${{ needs.build-listener.result == 'success' && needs.generate-tag.outputs.listener_tag || 'skip' }}
      dns_worker_tag: ${{ needs.build-dns-worker.result == 'success' && needs.generate-tag.outputs.dns_worker_tag || 'skip' }}
      api_tag: ${{ github.event.client_payload.api_tag || needs.generate-tag.outputs.api_tag }}
      web_tag: ${{ github.event.client_payload.web_tag || needs.generate-tag.outputs.web_tag }}
    secrets: inherit

  dev-summary:
    name: Deployment Summary
    needs: [generate-tag, deploy-infrastructure]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Dev Summary
        env:
          IMAGE_TAG: ${{ needs.generate-tag.outputs.image_tag }}
          DEV_STATUS: ${{ needs.deploy-infrastructure.result }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "# 🔧 Development Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Branch Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Development Only" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DEV_STATUS" = "success" ]; then
            echo "| Development | ✅ Success | Deployed successfully |" >> $GITHUB_STEP_SUMMARY
          elif [ "$DEV_STATUS" = "skipped" ]; then
            echo "| Development | ⏭️ Skipped | No infrastructure changes detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Development | ❌ Failed | Deployment failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$DEV_STATUS" = "success" ]; then
            echo "- Test your changes in the development environment" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor application logs for any issues" >> $GITHUB_STEP_SUMMARY
          elif [ "$DEV_STATUS" = "skipped" ]; then
            echo "- ✅ No deployment needed - only non-infrastructure files changed" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Changes were documentation, workflow, or other non-deployment files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Check deployment logs for error details" >> $GITHUB_STEP_SUMMARY
            echo "- Fix issues and re-run deployment" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Create a pull request to merge into main for production deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Production deployment will trigger automatically after PR merge" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "### AWS Console" >> $GITHUB_STEP_SUMMARY
          echo "- [ECS Clusters](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters)" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks)" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Deployment Logs & History" >> $GITHUB_STEP_SUMMARY
          echo "- [This Workflow Run](https://github.com/AITeeToolkit/aws-fargate-cdk/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [All Infrastructure Deployments](https://github.com/AITeeToolkit/aws-fargate-cdk/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- [Infrastructure & Listener Changelog](https://github.com/AITeeToolkit/aws-fargate-cdk/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
