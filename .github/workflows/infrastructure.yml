name: Deploy Infrastructure

on:
  push:
    branches: ['**']
    paths:
      # Trigger on infrastructure changes
      - 'stacks/**'
      - 'cdk_constructs/**'
      - 'aspects/**'
      - 'app.py'
      - 'cdk.json'
      - 'requirements.txt'
      - '.github/workflows/infrastructure.yml'
      - '.github/workflows/semantic-release.yml'
  workflow_call:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: string
      image_tag:
        description: Docker image tag (e.g., v1.2.3)
        required: false
        type: string
      domains:
        description: "Active domains JSON array"
        required: false
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        default: dev
        type: choice
        options:
          - dev
          - staging
          - prod
      image_tag:
        description: Docker image tag (e.g., v1.2.3)
        required: false
        type: string
      domains:
        description: "Active domains JSON array"
        required: false
        type: string
env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/storefront/${{ inputs.environment || github.event.inputs.environment || 'dev' }}
  IMAGE_TAG: ${{ inputs.image_tag || github.event.inputs.image_tag || github.ref_name }}
  PYTHON_VERSION: "3.11"
  CDK_ENV: ${{ inputs.environment || github.event.inputs.environment || 'dev' }}

jobs:
  deploy-cdk:
    name: Deploy CDK Stacks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_CODEBUILD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CODEBUILD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: Install Python dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: CDK Bootstrap
        run: |
          source .venv/bin/activate
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/us-east-1

      - name: Write domains.json
        if: ${{ inputs.domains != '' }}
        run: |
          echo '${{ inputs.domains }}' | jq '{domains: .}' > domains.json
          cat domains.json

      - name: CDK Deploy All Stacks
        env:
          CDK_IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          source .venv/bin/activate
          cdk deploy --require-approval never --all
          
      - name: Post deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const imageTag = '${{ env.IMAGE_TAG }}';
            const environment = '${{ env.CDK_ENV }}'; 
            const listenerImageTag = '${{ env.IMAGE_TAG }}';
            const listenerEnvironment = '${{ env.CDK_ENV }}'; 
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `ðŸŽ‰ **Application Deployed Successfully**\n\n` +
                    `- **Environment**: ${environment}\n` +
                    `- **Image Tag**: ${imageTag}\n` +
                    `- **Listener Image Tag**: ${listenerImageTag}\n` +
                    `- **Listener Environment**: ${listenerEnvironment}\n` +
                    `- **Status**: âœ… Success\n` +
                    `- **Timestamp**: ${new Date().toISOString()}`
            });