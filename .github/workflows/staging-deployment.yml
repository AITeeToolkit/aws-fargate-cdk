name: Staging Deployment

concurrency:
  group: infrastructure-deploy-staging
  cancel-in-progress: false  # Don't cancel deployments in progress

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
  repository_dispatch:
    types: [staging-deploy]

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: staging

jobs:
  test-gate:
    name: Test Gate
    uses: ./.github/workflows/test-suite.yml
    with:
      environment: staging
    secrets: inherit

  deploy-to-staging:
    name: Deploy to Staging
    needs: [test-gate]
    if: needs.test-gate.outputs.test_results == 'success'
    uses: ./.github/workflows/infra-build.yml
    with:
      environment: staging
      image_tag: latest
      listener_tag: latest
      dns_worker_tag: latest
      api_tag: ${{ github.event.client_payload.api_tag || 'latest' }}
      web_tag: ${{ github.event.client_payload.web_tag || 'latest' }}
    secrets: inherit

  post-deployment-tests:
    name: Post-Deployment Verification
    needs: [deploy-to-staging]
    if: needs.deploy-to-staging.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      health_check: ${{ steps.health.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install -r requirements.txt
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_CODEBUILD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CODEBUILD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for deployment to stabilize
        run: |
          echo "⏳ Waiting for services to stabilize..."
          sleep 60

      - name: Run post-deployment health checks
        id: health
        run: |
          echo "🔍 Running post-deployment health checks..."
          
          # Run integration tests against staging environment
          pytest tests/integration/ -v -m "not performance and not slow" \
            --junitxml=junit/post-deployment-results.xml \
            --tb=short || HEALTH_FAILED=true
          
          if [ "$HEALTH_FAILED" = "true" ]; then
            echo "❌ Health checks failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Health checks passed"
            echo "status=success" >> $GITHUB_OUTPUT
          fi
        env:
          ENVIRONMENT: staging

      - name: Upload health check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: post-deployment-health-checks
          path: junit/post-deployment-results.xml

  staging-summary:
    name: Staging Deployment Summary
    needs: [test-gate, deploy-to-staging, post-deployment-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate staging summary
        run: |
          echo "# 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Gate Results
          if [ "${{ needs.test-gate.outputs.test_results }}" = "success" ]; then
            echo "✅ **Pre-deployment Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Pre-deployment Tests**: Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment Results
          if [ "${{ needs.deploy-to-staging.result }}" = "success" ]; then
            echo "✅ **Staging Deployment**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Staging Deployment**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Health Check Results
          if [ "${{ needs.post-deployment-tests.outputs.health_check }}" = "success" ]; then
            echo "✅ **Post-deployment Health**: All services healthy" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.post-deployment-tests.result }}" = "skipped" ]; then
            echo "⏭️ **Post-deployment Health**: Skipped due to deployment failure" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Post-deployment Health**: Health checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-gate.outputs.test_results }}" == "success" && 
                "${{ needs.deploy-to-staging.result }}" == "success" && 
                "${{ needs.post-deployment-tests.outputs.health_check }}" == "success" ]]; then
            echo "🎉 **Staging deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Deployment successful" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Health checks passed" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 **Ready for production deployment**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Production Deployment" >> $GITHUB_STEP_SUMMARY
            echo "To deploy to production:" >> $GITHUB_STEP_SUMMARY
            echo "1. Go to [Production Deployment Workflow](https://github.com/AITeeToolkit/aws-fargate-cdk/actions/workflows/production-deployment.yml)" >> $GITHUB_STEP_SUMMARY
            echo "2. Click 'Run workflow'" >> $GITHUB_STEP_SUMMARY
            echo "3. Confirm production deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Staging deployment issues detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review and fix the following:" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.test-gate.outputs.test_results }}" != "success" ]; then
              echo "- Fix failing tests" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.deploy-to-staging.result }}" != "success" ]; then
              echo "- Fix deployment issues" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.post-deployment-tests.outputs.health_check }}" != "success" ]; then
              echo "- Fix service health issues" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Staging AWS Console](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters)" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups)" >> $GITHUB_STEP_SUMMARY
          echo "- [This Workflow Run](https://github.com/AITeeToolkit/aws-fargate-cdk/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
