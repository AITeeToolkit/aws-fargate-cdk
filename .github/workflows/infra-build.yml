name: Infrastructure Build & Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment (dev/prod)"
        required: true
        type: string
      image_tag:
        description: "Image tag"
        required: false
        type: string
      listener_tag:
        description: "Listener image tag"
        required: false
        type: string
      dns_worker_tag:
        description: "DNS Worker image tag"
        required: false
        type: string
      api_tag:
        description: "API image tag"
        required: false
        type: string
      web_tag:
        description: "Web image tag"
        required: false
        type: string
    secrets:
      GH_TOKEN:
        required: true
      AWS_CODEBUILD_ACCESS_KEY_ID:
        required: true
      AWS_CODEBUILD_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCOUNT_ID:
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_CODEBUILD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CODEBUILD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK & Python dependencies
        run: |
          npm install -g aws-cdk
          pip install -r requirements.txt

      - name: CDK Bootstrap
        run: cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}

      - name: Check Stack Status
        id: stack-status
        run: |
          ENV_NAME="${{ inputs.environment || 'dev' }}"
          STACKS=("NetworkStack" "SharedStack" "MultiAlbStack-$ENV_NAME" "APIServiceStack-$ENV_NAME" "WebServiceStack-$ENV_NAME" "ListenerServiceStack-$ENV_NAME" "DNSWorkerServiceStack-$ENV_NAME")

          BUSY=()
          for stack in "${STACKS[@]}"; do
            STATUS=$(aws cloudformation describe-stacks --stack-name "$stack" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")
            echo "🔍 $stack → $STATUS"
            if [[ "$STATUS" == *"IN_PROGRESS" ]]; then BUSY+=("$stack:$STATUS"); fi
          done

          if [ ${#BUSY[@]} -gt 0 ]; then
            echo "busy_stacks=true" >> $GITHUB_OUTPUT
            echo "busy_list=${BUSY[*]}" >> $GITHUB_OUTPUT
          else
            echo "busy_stacks=false" >> $GITHUB_OUTPUT
          fi

      - name: Wait for Busy Stacks
        if: steps.stack-status.outputs.busy_stacks == 'true'
        run: |
          echo "⏳ Waiting for busy stacks: ${{ steps.stack-status.outputs.busy_list }}"
          ENV_NAME="${{ inputs.environment || 'dev' }}"
          STACKS=("NetworkStack" "SharedStack" "MultiAlbStack-$ENV_NAME" "APIServiceStack-$ENV_NAME" "WebServiceStack-$ENV_NAME" "ListenerServiceStack-$ENV_NAME" "DNSWorkerServiceStack-$ENV_NAME")

          TIMEOUT=1200 ELAPSED=0 INTERVAL=60
          while [ $ELAPSED -lt $TIMEOUT ]; do
            READY=true
            for stack in "${STACKS[@]}"; do
              STATUS=$(aws cloudformation describe-stacks --stack-name "$stack" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")
              [[ "$STATUS" == *"IN_PROGRESS" ]] && READY=false && break
            done
            [ "$READY" = true ] && echo "✅ All stacks ready" && break
            sleep $INTERVAL; ELAPSED=$((ELAPSED + INTERVAL))
          done
          [ $ELAPSED -ge $TIMEOUT ] && echo "❌ Timeout waiting for stacks" && exit 1

      - name: Set Image Tags
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "LISTENER_IMAGE_TAG=${{ github.event.client_payload.listener_tag || 'skip' }}" >> $GITHUB_ENV
            echo "DNS_WORKER_IMAGE_TAG=${{ github.event.client_payload.dns_worker_tag || 'skip' }}" >> $GITHUB_ENV
            echo "API_IMAGE_TAG=${{ github.event.client_payload.api_tag || 'skip' }}" >> $GITHUB_ENV
            echo "WEB_IMAGE_TAG=${{ github.event.client_payload.web_tag || 'skip' }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=${{ github.event.client_payload.environment || 'dev' }}" >> $GITHUB_ENV
          else
            echo "LISTENER_IMAGE_TAG=${{ inputs.listener_tag || 'skip' }}" >> $GITHUB_ENV
            echo "DNS_WORKER_IMAGE_TAG=${{ inputs.dns_worker_tag || 'skip' }}" >> $GITHUB_ENV
            echo "API_IMAGE_TAG=${{ inputs.api_tag || 'skip' }}" >> $GITHUB_ENV
            echo "WEB_IMAGE_TAG=${{ inputs.web_tag || 'skip' }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=${{ inputs.environment || 'dev' }}" >> $GITHUB_ENV
          fi

      - name: Deploy Infrastructure
        run: |
          echo "🚀 Deploying with tags:"
          echo "Listener=$LISTENER_IMAGE_TAG, DNS=$DNS_WORKER_IMAGE_TAG, API=$API_IMAGE_TAG, Web=$WEB_IMAGE_TAG"
          CONTEXT="--context env=$ENVIRONMENT --context listenerTag=$LISTENER_IMAGE_TAG --context dnsWorkerTag=$DNS_WORKER_IMAGE_TAG --context apiTag=$API_IMAGE_TAG --context webTag=$WEB_IMAGE_TAG"
          cdk deploy --all --require-approval never $CONTEXT

      - name: Deployment Summary
        if: always()
        run: |
          echo "# 🚀 Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Tag |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Listener | \`$LISTENER_IMAGE_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| DNS Worker | \`$DNS_WORKER_IMAGE_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| API | \`$API_IMAGE_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Web | \`$WEB_IMAGE_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Check [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Check [ECS Services](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/storefront-cluster/services)" >> $GITHUB_STEP_SUMMARY