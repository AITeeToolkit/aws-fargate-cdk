name: Infrastructure Build & Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment (dev/prod)"
        required: true
        type: string
      image_tag:
        description: "Image tag"
        required: false
        type: string
      listener_tag:
        description: "Listener image tag"
        required: false
        type: string
      dns_worker_tag:
        description: "DNS Worker image tag"
        required: false
        type: string
      api_tag:
        description: "API image tag"
        required: false
        type: string
      web_tag:
        description: "Web image tag"
        required: false
        type: string
  repository_dispatch:
    types: [deploy-infrastructure]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_CODEBUILD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CODEBUILD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache CDK
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-cdk-${{ hashFiles('package.json') }}

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Check Stack Status
        id: stack-status
        run: |
          echo "🔍 Checking CloudFormation stack status..."
          
          ENV_NAME="${{ inputs.environment || 'dev' }}"
          STACKS=(
            "NetworkStack"
            "SharedStack"
            "MultiAlbStack-$ENV_NAME"
            "APIServiceStack-$ENV_NAME"
            "WebServiceStack-$ENV_NAME"
            "ListenerServiceStack-$ENV_NAME"
            "DNSWorkerServiceStack-$ENV_NAME"
          )
          
          BUSY_STACKS=()
          
          for stack in "${STACKS[@]}"; do
            echo "Checking $stack..."
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name "$stack" \
              --query 'Stacks[0].StackStatus' \
              --output text 2>/dev/null || echo "NOT_FOUND")
            
            case "$STATUS" in
              *"IN_PROGRESS")
                echo "⚠️  $stack is busy: $STATUS"
                BUSY_STACKS+=("$stack:$STATUS")
                ;;
              "NOT_FOUND")
                echo "ℹ️  $stack not found (will be created)"
                ;;
              *)
                echo "✅ $stack is ready: $STATUS"
                ;;
            esac
          done
          
          if [ ${#BUSY_STACKS[@]} -gt 0 ]; then
            echo "busy_stacks=true" >> $GITHUB_OUTPUT
            echo "busy_list=${BUSY_STACKS[*]}" >> $GITHUB_OUTPUT
            echo "❌ Found busy stacks: ${BUSY_STACKS[*]}"
          else
            echo "busy_stacks=false" >> $GITHUB_OUTPUT
            echo "✅ All stacks are ready for deployment"
          fi

      - name: CDK Bootstrap
        run: cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/us-east-1

      - name: Set Image Tags
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "LISTENER_IMAGE_TAG=skip" >> $GITHUB_ENV
            echo "DNS_WORKER_IMAGE_TAG=skip" >> $GITHUB_ENV
            echo "API_IMAGE_TAG=${{ github.event.client_payload.api_tag || 'skip' }}" >> $GITHUB_ENV
            echo "WEB_IMAGE_TAG=${{ github.event.client_payload.web_tag || 'skip' }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=${{ github.event.client_payload.environment || 'dev' }}" >> $GITHUB_ENV
          else
            echo "LISTENER_IMAGE_TAG=${{ inputs.listener_tag || 'skip' }}" >> $GITHUB_ENV
            echo "DNS_WORKER_IMAGE_TAG=${{ inputs.dns_worker_tag || 'skip' }}" >> $GITHUB_ENV
            echo "API_IMAGE_TAG=${{ inputs.api_tag || 'skip' }}" >> $GITHUB_ENV
            echo "WEB_IMAGE_TAG=${{ inputs.web_tag || 'skip' }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=${{ inputs.environment || 'dev' }}" >> $GITHUB_ENV
          fi

      - name: Wait for Busy Stacks
        if: steps.stack-status.outputs.busy_stacks == 'true'
        run: |
          echo "⏳ Infrastructure is busy, waiting for completion..."
          echo "Busy stacks: ${{ steps.stack-status.outputs.busy_list }}"
          
          TIMEOUT=600  # Reduced from 1200 to 600 seconds (10 minutes)
          ELAPSED=0
          INTERVAL=60
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            echo "⏱️  Waiting... ($ELAPSED/$TIMEOUT seconds)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            
            ALL_READY=true
            STACKS=("NetworkStack" "SharedStack" "MultiAlbStack-$ENVIRONMENT" "APIServiceStack-$ENVIRONMENT" "WebServiceStack-$ENVIRONMENT" "ListenerServiceStack-$ENVIRONMENT" "DNSWorkerServiceStack-$ENVIRONMENT")
            
            for stack in "${STACKS[@]}"; do
              STATUS=$(aws cloudformation describe-stacks --stack-name "$stack" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")
              if [[ "$STATUS" == *"IN_PROGRESS" ]]; then
                echo "⚠️  $stack still busy: $STATUS"
                ALL_READY=false
                break
              fi
            done
            
            if [ "$ALL_READY" = true ]; then
              echo "✅ All stacks are now ready!"
              break
            fi
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "❌ Timeout waiting for stacks to become ready"
            exit 1
          fi

      - name: Deploy Infrastructure
        if: steps.stack-status.outputs.busy_stacks == 'false' || success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Deploying with image tags:"
          echo "  Listener:   $LISTENER_IMAGE_TAG"
          echo "  DNS Worker: $DNS_WORKER_IMAGE_TAG"
          echo "  API:        $API_IMAGE_TAG"
          echo "  Web:      $WEB_IMAGE_TAG"
          
          # Note: Ensure CDK stacks reference 'domains.json' for DNS configuration (e.g., Route53 records).
          # If domains.json changes (e.g., via listener_app.py on domain-updates branch),
          # verify that DNSWorkerServiceStack or other stacks use it to update DNS settings.
          
          CONTEXT="--context env=$ENVIRONMENT"
          CONTEXT="$CONTEXT --context listenerTag=$LISTENER_IMAGE_TAG"
          CONTEXT="$CONTEXT --context dnsWorkerTag=$DNS_WORKER_IMAGE_TAG"
          CONTEXT="$CONTEXT --context apiTag=$API_IMAGE_TAG"
          CONTEXT="$CONTEXT --context webTag=$WEB_IMAGE_TAG"

          cdk deploy --all --require-approval never $CONTEXT

      - name: Deployment Summary
        if: always()
        run: |
          echo "# 🚀 Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔒 Collision Prevention" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.stack-status.outputs.busy_stacks }}" = "true" ]; then
            echo "- ⏳ **Waited for busy stacks**: ${{ steps.stack-status.outputs.busy_list }}" >> $GITHUB_STEP_SUMMARY
            echo "- 🚦 **Concurrency control**: Active (queued deployment)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **No conflicts detected**: All stacks were ready" >> $GITHUB_STEP_SUMMARY
            echo "- 🚦 **Concurrency control**: Active (prevented parallel runs)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Tag | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Listener** | \`$LISTENER_IMAGE_TAG\` | ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **DNS Worker** | \`$DNS_WORKER_IMAGE_TAG\` | ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **API** | \`$API_IMAGE_TAG\` | ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Web** | \`$WEB_IMAGE_TAG\` | ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks)" >> $GITHUB_STEP_SUMMARY
          echo "- [ECS Services](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/storefront-cluster/services)" >> $GITHUB_STEP_SUMMARY