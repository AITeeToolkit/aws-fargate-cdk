#!/bin/bash

# CloudFormation Stack Management Script
# Usage: cfn <command> <service>-<env>
# Examples:
#   cfn describe api-dev
#   cfn delete web-dev
#   cfn wait-for dns-dev

set -e

AWS_PROFILE="AdministratorAccess-156041439702"
AWS_REGION="us-east-1"

# Stack name mapping function
get_stack_prefix() {
    case "$1" in
        "parameters") echo "ParametersStack" ;;
        "api") echo "APIServiceStack" ;;
        "web") echo "WebServiceStack" ;;
        "listener") echo "ListenerServiceStack" ;;
        "dns") echo "DNSWorkerServiceStack" ;;
        "go") echo "GoDnsServiceStack" ;;
        "shared") echo "SharedStack" ;;
        "opensearch") echo "OpenSearchDomain" ;;
        "alb") echo "MultiAlbStack" ;;
        "ecr") echo "StorefrontECRStack" ;;
        *) echo "" ;;
    esac
}

show_usage() {
    echo "CloudFormation Stack Management"
    echo ""
    echo "Usage: cfn <command> [service-env]"
    echo ""
    echo "Commands:"
    echo "  describe <service-env>    - Describe stack status"
    echo "  list                      - List all Storefront stacks"
    echo "  events <service-env>      - Show stack events"
    echo "  cancel <service-env>      - Cancel stack update"
    echo "  wait-rollback <service-env> - Wait for rollback completion"
    echo "  delete <service-env>      - Delete stack"
    echo "  wait-delete <service-env> - Wait for deletion completion"
    echo "  wait-for <service-env>    - Wait for any operation to complete"
    echo ""
    echo "Services: api, web, listener, dns, go, shared, opensearch, alb, ecr, parameters"
    echo "Environment: dev, prod, staging, etc."
    echo ""
    echo "Examples:"
    echo "  cfn describe api-dev"
    echo "  cfn delete web-dev"
    echo "  cfn wait-for dns-dev"
    echo "  cfn list"
}

get_stack_name() {
    local service_env="$1"

    if [[ "$service_env" =~ ^([^-]+)-(.+)$ ]]; then
        local service="${BASH_REMATCH[1]}"
        local env="${BASH_REMATCH[2]}"

        local prefix=$(get_stack_prefix "$service")
        if [[ -n "$prefix" ]]; then
            # GoDnsServiceStack doesn't have environment suffix
            if [[ "$prefix" == "GoDnsServiceStack" ]]; then
                echo "$prefix"
            else
                echo "$prefix-$env"
            fi
        else
            echo "‚ùå Unknown service: $service" >&2
            echo "Available services: api, web, listener, dns, go, shared, opensearch, alb, ecr, parameters" >&2
            exit 1
        fi
    else
        echo "‚ùå Invalid format. Use: service-env (e.g., api-dev)" >&2
        exit 1
    fi
}

run_aws_command() {
    AWS_PROFILE="$AWS_PROFILE" aws "$@" --region "$AWS_REGION"
}

case "${1:-}" in
    "describe")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "üîç Describing stack: $STACK_NAME"
        run_aws_command cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].{StackStatus:StackStatus,LastUpdated:LastUpdatedTime}'
        ;;

    "list")
        echo "üìã Listing all Storefront stacks:"
        run_aws_command cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE UPDATE_ROLLBACK_COMPLETE DELETE_IN_PROGRESS \
            --query 'StackSummaries[?contains(StackName, `Storefront`)].{Name:StackName,Status:StackStatus}' \
            --output table
        ;;

    "events")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "üìú Stack events for: $STACK_NAME"
        run_aws_command cloudformation describe-stack-events \
            --stack-name "$STACK_NAME"
        ;;

    "cancel")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "‚èπÔ∏è  Cancelling stack update: $STACK_NAME"
        run_aws_command cloudformation cancel-update-stack \
            --stack-name "$STACK_NAME"
        ;;

    "wait-rollback")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "‚è≥ Waiting for rollback completion: $STACK_NAME"
        run_aws_command cloudformation wait stack-rollback-complete \
            --stack-name "$STACK_NAME"
        echo "‚úÖ Rollback completed: $STACK_NAME"
        ;;

    "delete")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "üóëÔ∏è  Deleting stack: $STACK_NAME"
        echo "‚ö†Ô∏è  This action cannot be undone!"
        read -p "Are you sure? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            run_aws_command cloudformation delete-stack \
                --stack-name "$STACK_NAME"
            echo "‚úÖ Deletion initiated: $STACK_NAME"
        else
            echo "‚ùå Deletion cancelled"
            exit 1
        fi
        ;;

    "wait-delete")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "‚è≥ Waiting for deletion completion: $STACK_NAME"
        run_aws_command cloudformation wait stack-delete-complete \
            --stack-name "$STACK_NAME"
        echo "‚úÖ Deletion completed: $STACK_NAME"
        ;;

    "wait-for")
        if [[ -z "${2:-}" ]]; then
            echo "‚ùå Missing service-env argument"
            show_usage
            exit 1
        fi

        STACK_NAME=$(get_stack_name "$2")
        echo "‚è≥ Checking current status: $STACK_NAME"

        STATUS=$(run_aws_command cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NOT_FOUND")

        case "$STATUS" in
            *"IN_PROGRESS")
                echo "üîÑ Stack operation in progress, waiting..."
                run_aws_command cloudformation wait stack-update-complete \
                    --stack-name "$STACK_NAME" 2>/dev/null || \
                run_aws_command cloudformation wait stack-create-complete \
                    --stack-name "$STACK_NAME" 2>/dev/null || \
                run_aws_command cloudformation wait stack-delete-complete \
                    --stack-name "$STACK_NAME" 2>/dev/null || true
                echo "‚úÖ Operation completed: $STACK_NAME"
                ;;
            "DELETE_IN_PROGRESS")
                echo "üóëÔ∏è  Waiting for deletion..."
                run_aws_command cloudformation wait stack-delete-complete \
                    --stack-name "$STACK_NAME"
                echo "‚úÖ Deletion completed: $STACK_NAME"
                ;;
            "ROLLBACK_IN_PROGRESS")
                echo "‚Ü©Ô∏è  Waiting for rollback..."
                run_aws_command cloudformation wait stack-rollback-complete \
                    --stack-name "$STACK_NAME"
                echo "‚úÖ Rollback completed: $STACK_NAME"
                ;;
            "NOT_FOUND")
                echo "‚ùå Stack not found: $STACK_NAME"
                exit 1
                ;;
            *)
                echo "‚ÑπÔ∏è  Stack is stable: $STATUS"
                ;;
        esac
        ;;

    "help"|"-h"|"--help"|"")
        show_usage
        ;;

    *)
        echo "‚ùå Unknown command: ${1:-}"
        echo ""
        show_usage
        exit 1
        ;;
esac
